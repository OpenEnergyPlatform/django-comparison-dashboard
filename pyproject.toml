[tool.poetry]
name = "django-comparison-dashboard"
version = "2.2.0"
description = "Django app to compare scenarios in a dashboard"
authors = ["Hendrik Huyskens <hendrik.huyskens@rl-institut.de>"]
license = "MIT"
readme = "README.md"
packages = [{include = "django_comparison_dashboard"}]

[tool.poetry.dependencies]
python = "^3.10"
plotly = "^5.16.1"
units = "^0.7"
jmespath = "^1.0.1"
pandas = "^2.1.1"
requests = "^2.31.0"
django-appconf = "^1.0.5"
django-template-partials = "^23.4"
django-filter = "^23.3"
pandera = {extras = ["io"], version = "^0.17.2"}
django-htmx = "^1.17.2"
numpy = "<2.0.0"


[tool.poetry.group.dev.dependencies]
django = "^4.2.4"
pre-commit = "^3.4.0"
django-environ = "0.10.0"
psycopg = {version = "3.1.9", extras = ["c"]}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


# ==== pytest ====
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--ds=config.settings.test --reuse-db"
python_files = [
    "tests.py",
    "test_*.py",
]


# ==== black ====
[tool.black]
line-length = 119
target-version = ['py311']


# ==== isort ====
[tool.isort]
profile = "black"
line_length = 119
known_first_party = [
    "sedos_dashboard",
    "config",
]
skip = ["venv/"]
skip_glob = ["**/migrations/*.py"]


# ==== djLint ====
[tool.djlint]
blank_line_after_tag = "load,extends"
close_void_tags = true
format_css = true
format_js = true
# TODO: remove T002 when fixed https://github.com/Riverside-Healthcare/djLint/issues/687
ignore = "H006,H030,H031,T002"
include = "H017,H035"
indent = 2
max_line_length = 119
profile = "django"

[tool.djlint.css]
indent_size = 2

[tool.djlint.js]
indent_size = 2


[tool.ruff]
line-length = 119
select = ["ALL"]
exclude = [
  "manage.py",
  "digiplan/utils/ogr_layer_mapping.py",
  "config/wsgi.py",
  "digiplan/contrib/*",
  "merge_local_dotenvs_in_dotenv.py",
  "digiplan/utils/context_processors.py"
]
ignore = [
  "I001",    # Import block is un-sorted or un-formatted (done by isort)
  "D203",    # 1 blank line required before class docstring
  "D212",    # Multi-line docstring summary should start at the first line pydocstyle
  "ANN101",  # Missing type annotation for `self` in method
  "ANN102",  # Missing type annotation for `cls` in classmethod
  "ANN003",  # Missing type annotation for `**kwargs`
  "EM102",   # Exception must not use an f-string literal, assign to variable first
  "TRY003",  # Avoid specifying long messages outside the exception class
  "S101",    # Use of `assert` detected
  "UP007",   # Use `X | Y` for type annotations
  "B905",    # `zip()` without an explicit `strict=` parameter
  "FIX001",  # Line contains FIXME
  "FIX002",  # Line contains TODO
  "RET504",  # Unnecessary variable assignment before `return` statement
  "G004",    # Logging statement uses f-string
  "PD011",   # Use `.to_numpy()` instead of `.values`  (does not work out of the box)
  "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`
  "UP038",   # (non-pep604-isinstance)
]
fix = true
show-fixes = true
unfixable = ["UP007", "I001"]

[tool.ruff.per-file-ignores]
"tests/*" = [
  "PLR2004", # Magic value used in comparison
  "ANN201",  # Missing return type annotation for public function
]
"*/__init__.py" = [
  "D104",  # Missing docstring in public package
]
